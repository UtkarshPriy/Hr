const express = require('express');
const { PDFDocument, rgb } = require('pdf-lib');
const fs = require('fs');
const app = express();

app.use(express.json());

app.post('/sign-pdf', async (req, res) => {
    const { name, location, reason, contact, timestamp, signatureImage } = req.body;

    try {
        // Load an existing PDF
        const existingPdfBytes = fs.readFileSync('path/to/your/existing.pdf');
        const pdfDoc = await PDFDocument.load(existingPdfBytes);

        // Get the last page of the PDF
        const pages = pdfDoc.getPages();
        const lastPage = pages[pages.length - 1];

        // Determine where the text ends on the last page
        const { height } = lastPage.getSize();
        let y = height - 50; // Start a little below the top of the page

        // Loop through all the text items on the page and find the lowest y coordinate
        lastPage.node.contents.forEach(content => {
            content.node.operands.forEach(operand => {
                if (Array.isArray(operand)) {
                    operand.forEach(element => {
                        if (element.y < y) y = element.y;
                    });
                }
            });
        });

        // Add signature details below the existing content
        const padding = 20; // Space between existing content and new signature
        y -= padding;

        lastPage.drawText(`Name: ${name}`, { x: 50, y: y, size: 12 });
        y -= 20;
        lastPage.drawText(`Location: ${location}`, { x: 50, y: y, size: 12 });
        y -= 20;
        lastPage.drawText(`Reason: ${reason}`, { x: 50, y: y, size: 12 });
        y -= 20;
        lastPage.drawText(`Contact Information: ${contact}`, { x: 50, y: y, size: 12 });
        y -= 20;
        lastPage.drawText(`Date and Time: ${timestamp}`, { x: 50, y: y, size: 12 });
        y -= 40; // Leave more space for the signature image

        // Add the signature image to the PDF
        if (signatureImage) {
            const signatureBytes = fs.readFileSync(signatureImage);
            const signatureImageEmbed = await pdfDoc.embedPng(signatureBytes);
            const signatureDims = signatureImageEmbed.scale(0.5);
            lastPage.drawImage(signatureImageEmbed, {
                x: 50,
                y: y - signatureDims.height,
                width: signatureDims.width,
                height: signatureDims.height,
            });
        }

        // Save the signed PDF
        const pdfBytes = await pdfDoc.save();
        fs.writeFileSync('signed_document.pdf', pdfBytes);

        res.send('PDF signed successfully');
    } catch (error) {
        console.error(error);
        res.status(500).send('An error occurred while signing the PDF');
    }
});

app.listen(3000, () => {
    console.log('Server started on http://localhost:3000');
});
